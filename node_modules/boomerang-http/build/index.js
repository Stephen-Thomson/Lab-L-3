(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('node-fetch')) :
  typeof define === 'function' && define.amd ? define(['node-fetch'], factory) :
  (global = global || self, global.PaymentModal = factory(global.nodeFetch));
}(this, (function (nodeFetch) { 'use strict';

  nodeFetch = nodeFetch && Object.prototype.hasOwnProperty.call(nodeFetch, 'default') ? nodeFetch['default'] : nodeFetch;

  // thanks to https://stackoverflow.com/a/1714899 for this
  var JSON2QS = (json => {
    const str = [];

    for (const p in json) {
      if (json.hasOwnProperty(p)) {
        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(json[p]));
      }
    }

    return str.join('&');
  });

  var index = (async (method, url, params = {}, headers = {}) => {
    if (method === 'GET') {
      url = url + '?' + JSON2QS(params);

      if (url.endsWith('?')) {
        url = url.slice(0, url.length - 1);
      }
    }

    if (method !== 'GET') {
      headers['Content-Type'] = 'application/json';
    }

    let correctFetch;

    if (typeof fetch === 'function') {
      correctFetch = fetch;
    } else {
      correctFetch = nodeFetch;
    }

    const result = await correctFetch(url, {
      method,
      headers,
      referrerPolicy: 'no-referrer',
      redirects: 'follow',
      cache: 'no-cache',
      body: method !== 'GET' ? JSON.stringify(params) : undefined
    });

    try {
      return result.json();
    } catch (e) {
      return result.text();
    }
  });

  return index;

})));
