const crypto = require('crypto')

/**
 * Verifies a nonce derived from a privateKey
 * @param {string} nonce a nonce to verify as a as a base64 string.
 * @param {string} privateKey a privateKey as a hex string used to derive the nonce.
 * @returns {Boolean} the status of the validation
 */
 module.exports = (nonce, privateKey) => {
  const buffer = Buffer.from(nonce, 'base64')

  // Ensure that the provided nonce is 44 characters long (base64 encoding) 
  // and the resulting buffer has a length of 32 bytes
  if (nonce.length !== 44 || !nonce.endsWith('=') || buffer.length !== 32) {
    return false
  } 

  // The private key provided must be a 32 byte hex string
  if (privateKey.length !== 64 || Buffer.from(privateKey, 'hex').length !== 32) {
    return false
  }

  // Split the nonce buffer into two equal halves, and create an HMAC
  const firstHalf = buffer.slice(0, buffer.length / 2)
  const secondHalf = buffer.slice(buffer.length / 2)
  const hmac = crypto.createHmac('sha256', privateKey)

  // Calculate the HMAC using the first half of the nonce
  const actualBuffer = hmac.update(firstHalf).digest()
  const actualSecondHalf = actualBuffer.slice(0, buffer.length / 2)

  // Compare the second half of the provided nonce with the first half of the calculated HMAC
  return Buffer.compare(secondHalf, actualSecondHalf) === 0
}