const crypto = require('crypto')

/**
 * Creates a nonce derived from a privateKey
 * @param {string} privateKey Private key to derive the nonce from.
 * @returns {string} a random nonce derived from the provided private key.
 */
 module.exports = (privateKey) => {

  // The private key provided must be a 32 byte hex string
  if (privateKey.length !== 64 || Buffer.from(privateKey, 'hex').length !== 32) {
    const e = new Error('Private key provided must be a 32 byte hex string!')
    e.code = 'ERR_INVALID_PRIVATE_KEY'
    throw e
  }

  // Generate 16 random bytes for the first half of the data
  const firstHalf = crypto.randomBytes(16)

  // Create an sha256 HMAC object from the privateKey
  // and calculate the HMAC using the first half of the data
  const hmac = crypto.createHmac('sha256', privateKey)
  const buffer = hmac.update(firstHalf).digest()

  // Take the first 16 bytes of the resulting HMAC as the second half of the nonce
  const secondHalf = buffer.slice(0, 16)

  // Return a base64 string nonce
  return Buffer.concat([firstHalf, secondHalf]).toString('base64')
}